import { GoogleProtobufAny, CosmwasmWasmV1Authz, } from '@injectivelabs/core-proto-ts';
import { BaseAuthorization } from './Base.js';
/**
 * @category Contract Exec Arguments
 */
export default class ContractExecutionAuthorization extends BaseAuthorization {
    static fromJSON(params) {
        return new ContractExecutionAuthorization(params);
    }
    toAny() {
        const { params } = this;
        const authorization = CosmwasmWasmV1Authz.ContractExecutionAuthorization.create();
        const grant = CosmwasmWasmV1Authz.ContractGrant.create();
        grant.contract = params.contract;
        if (params.limit) {
            const limit = CosmwasmWasmV1Authz.MaxCallsLimit.create();
            limit.remaining = params.limit.maxCalls.toString();
            const any = GoogleProtobufAny.Any.create();
            any.typeUrl = '/cosmwasm.wasm.v1.MaxCallsLimit';
            any.value = CosmwasmWasmV1Authz.MaxCallsLimit.encode(limit).finish();
            grant.limit = any;
        }
        if (params.filter) {
            const filter = CosmwasmWasmV1Authz.AcceptedMessageKeysFilter.create();
            filter.keys = params.filter.acceptedMessagesKeys;
            const any = GoogleProtobufAny.Any.create();
            any.typeUrl = '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter';
            any.value =
                CosmwasmWasmV1Authz.AcceptedMessageKeysFilter.encode(filter).finish();
            grant.limit = any;
        }
        authorization.grants = [grant];
        const any = GoogleProtobufAny.Any.create();
        any.typeUrl = '/cosmwasm.wasm.v1.ContractExecutionAuthorization';
        any.value =
            CosmwasmWasmV1Authz.ContractExecutionAuthorization.encode(authorization).finish();
        return any;
    }
    toProto() {
        const authorization = CosmwasmWasmV1Authz.ContractExecutionAuthorization.decode(this.toAny().value);
        return authorization;
    }
    toAmino() {
        const { params } = this;
        const grant = {};
        grant.contract = params.contract;
        if (params.limit) {
            grant.limit = {
                type: 'wasm/MaxCallsLimit',
                remaining: params.limit.maxCalls,
            };
        }
        if (params.filter) {
            grant.filter = {
                type: 'wasm/AcceptedMessageKeysFilter',
                keys: params.filter.acceptedMessagesKeys,
            };
        }
        return {
            type: 'wasm/ContractExecutionAuthorization',
            grants: [grant],
        };
    }
    toWeb3() {
        const { params } = this;
        const grant = {};
        grant.contract = params.contract;
        if (params.limit) {
            grant.limit = {
                '@type': '/cosmwasm.wasm.v1.MaxCallsLimit',
                remaining: params.limit.maxCalls,
            };
        }
        if (params.filter) {
            grant.filter = {
                '@type': '/cosmwasm.wasm.v1.AcceptedMessageKeysFilter',
                keys: params.filter.acceptedMessagesKeys,
            };
        }
        return {
            '@type': '/cosmwasm.wasm.v1.ContractExecutionAuthorization',
            grants: [grant],
        };
    }
}
//# sourceMappingURL=ContractExecutionAuthorization.js.map