"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _nullishCoalesce(lhs, rhsFn) { if (lhs != null) { return lhs; } else { return rhsFn(); } } function _optionalChain(ops) { let lastAccessLHS = undefined; let value = ops[0]; let i = 1; while (i < ops.length) { const op = ops[i]; const fn = ops[i + 1]; i += 2; if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) { return undefined; } if (op === 'access' || op === 'optionalAccess') { lastAccessLHS = value; value = fn(value); } else if (op === 'call' || op === 'optionalCall') { value = fn((...args) => value.call(lastAccessLHS, ...args)); lastAccessLHS = undefined; } } return value; }var _chunkU237PHUXjs = require('./chunk-U237PHUX.js');var _chunkYPXRNKFVjs = require('./chunk-YPXRNKFV.js');var _chunkEI7MMDWYjs = require('./chunk-EI7MMDWY.js');var _core = require('@goat-sdk/core');var _walletevm = require('@goat-sdk/wallet-evm');function d(f,t,n,e){var r=arguments.length,s=r<3?t:e===null?e=Object.getOwnPropertyDescriptor(t,n):e,u;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")s=Reflect.decorate(f,t,n,e);else for(var l=f.length-1;l>=0;l--)(u=f[l])&&(s=(r<3?u(s):r>3?u(t,n,s):u(t,n))||s);return r>3&&s&&Object.defineProperty(t,n,s),s}_chunkEI7MMDWYjs.a.call(void 0, d,"_ts_decorate");function o(f,t){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(f,t)}_chunkEI7MMDWYjs.a.call(void 0, o,"_ts_metadata");var i=class{static{_chunkEI7MMDWYjs.a.call(void 0, this,"Erc20Service")}constructor({tokens:t}={}){this.tokens=_nullishCoalesce(t, () => ([]))}async getTokenInfoBySymbol(t,n){let e=this.tokens.find(u=>[u.symbol,u.symbol.toLowerCase()].includes(n.symbol));if(!e)throw Error(`Token with symbol ${n.symbol} not found`);let r=t.getChain(),s=_optionalChain([e, 'access', _ => _.chains, 'access', _2 => _2[r.id], 'optionalAccess', _3 => _3.contractAddress]);if(!s)throw Error(`Token with symbol ${n.symbol} not found on chain ${r.id}`);return{symbol:_optionalChain([e, 'optionalAccess', _4 => _4.symbol]),contractAddress:s,decimals:_optionalChain([e, 'optionalAccess', _5 => _5.decimals]),name:_optionalChain([e, 'optionalAccess', _6 => _6.name])}}async getTokenBalance(t,n){try{let e=await t.resolveAddress(n.wallet),r=await t.read({address:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"balanceOf",args:[e]});return Number(r.value)}catch(e){throw Error(`Failed to fetch balance: ${e}`)}}async transfer(t,n){try{let e=await t.resolveAddress(n.to);return(await t.sendTransaction({to:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"transfer",args:[e,n.amount]})).hash}catch(e){throw Error(`Failed to transfer: ${e}`)}}async getTokenTotalSupply(t,n){try{return(await t.read({address:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"totalSupply"})).value}catch(e){throw Error(`Failed to fetch total supply: ${e}`)}}async getTokenAllowance(t,n){try{let e=await t.resolveAddress(n.owner),r=await t.resolveAddress(n.spender),s=await t.read({address:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"allowance",args:[e,r]});return Number(s.value)}catch(e){throw Error(`Failed to fetch allowance: ${e}`)}}async approve(t,n){try{let e=await t.resolveAddress(n.spender);return(await t.sendTransaction({to:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"approve",args:[e,n.amount]})).hash}catch(e){throw Error(`Failed to approve: ${e}`)}}async revokeApproval(t,n){try{let e=await t.resolveAddress(n.spender);return(await t.sendTransaction({to:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"approve",args:[e,0]})).hash}catch(e){throw Error(`Failed to revoke approval: ${e}`)}}async transferFrom(t,n){try{let e=await t.resolveAddress(n.from),r=await t.resolveAddress(n.to);return(await t.sendTransaction({to:n.tokenAddress,abi:_chunkU237PHUXjs.a,functionName:"transferFrom",args:[e,r,n.amount]})).hash}catch(e){throw Error(`Failed to transfer from: ${e}`)}}async convertToBaseUnit(t){let{amount:n,decimals:e}=t,r=n*10**e;return Number(r)}async convertFromBaseUnit(t){let{amount:n,decimals:e}=t,r=n/10**e;return Number(r)}};d([_core.Tool.call(void 0, {description:"Get the ERC20 token info by its symbol, including the contract address, decimals, and name"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.a>"u"?Object:_chunkYPXRNKFVjs.a]),o("design:returntype",Promise)],i.prototype,"getTokenInfoBySymbol",null);d([_core.Tool.call(void 0, {description:"Get the balance of an ERC20 token in base units. Convert to decimal units before returning."}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.b>"u"?Object:_chunkYPXRNKFVjs.b]),o("design:returntype",Promise)],i.prototype,"getTokenBalance",null);d([_core.Tool.call(void 0, {description:"Transfer an amount of an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.c>"u"?Object:_chunkYPXRNKFVjs.c]),o("design:returntype",Promise)],i.prototype,"transfer",null);d([_core.Tool.call(void 0, {description:"Get the total supply of an ERC20 token"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.d>"u"?Object:_chunkYPXRNKFVjs.d]),o("design:returntype",Promise)],i.prototype,"getTokenTotalSupply",null);d([_core.Tool.call(void 0, {description:"Get the allowance of an ERC20 token"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.e>"u"?Object:_chunkYPXRNKFVjs.e]),o("design:returntype",Promise)],i.prototype,"getTokenAllowance",null);d([_core.Tool.call(void 0, {description:"Approve an amount of an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.f>"u"?Object:_chunkYPXRNKFVjs.f]),o("design:returntype",Promise)],i.prototype,"approve",null);d([_core.Tool.call(void 0, {description:"Revoke approval for an ERC20 token to an address"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.g>"u"?Object:_chunkYPXRNKFVjs.g]),o("design:returntype",Promise)],i.prototype,"revokeApproval",null);d([_core.Tool.call(void 0, {description:"Transfer an amount of an ERC20 token from an address to another address"}),o("design:type",Function),o("design:paramtypes",[typeof _walletevm.EVMWalletClient>"u"?Object:_walletevm.EVMWalletClient,typeof _chunkYPXRNKFVjs.h>"u"?Object:_chunkYPXRNKFVjs.h]),o("design:returntype",Promise)],i.prototype,"transferFrom",null);d([_core.Tool.call(void 0, {description:"Convert an amount of an ERC20 token to its base unit"}),o("design:type",Function),o("design:paramtypes",[typeof _chunkYPXRNKFVjs.i>"u"?Object:_chunkYPXRNKFVjs.i]),o("design:returntype",Promise)],i.prototype,"convertToBaseUnit",null);d([_core.Tool.call(void 0, {description:"Convert an amount of an ERC20 token from its base unit to its decimal unit"}),o("design:type",Function),o("design:paramtypes",[typeof _chunkYPXRNKFVjs.j>"u"?Object:_chunkYPXRNKFVjs.j]),o("design:returntype",Promise)],i.prototype,"convertFromBaseUnit",null);exports.a = i;
