import{a as d,g as l,h as c}from"./chunk-BL4Q3R5O.mjs";import{Tool as m}from"@goat-sdk/core";import{EVMWalletClient as p}from"@goat-sdk/wallet-evm";function h(r,t,e,o){var a=arguments.length,n=a<3?t:o===null?o=Object.getOwnPropertyDescriptor(t,e):o,i;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")n=Reflect.decorate(r,t,e,o);else for(var f=r.length-1;f>=0;f--)(i=r[f])&&(n=(a<3?i(n):a>3?i(t,e,n):i(t,e))||n);return a>3&&n&&Object.defineProperty(t,e,n),n}d(h,"_ts_decorate");function s(r,t){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(r,t)}d(s,"_ts_metadata");var u=class{static{d(this,"UniswapService")}params;constructor(t){this.params=t}async makeRequest(t,e){let o=new URL(`${this.params.baseUrl}/${t}`),a=await fetch(o.toString(),{method:"POST",body:JSON.stringify(e),headers:{"x-api-key":this.params.apiKey}});if(!a.ok)throw new Error(`Failed to fetch ${t}: ${JSON.stringify(await a.json(),null,2)}`);return a.json()}async checkApproval(t,e){let a=(await this.makeRequest("check_approval",{token:e.token,amount:e.amount,walletAddress:e.walletAddress,chainId:t.getChain().id})).approval;return a?{status:"approved",txHash:(await t.sendTransaction({to:a.to,value:a.value,data:a.data})).hash}:{status:"approved"}}async getQuote(t,e){return this.makeRequest("quote",{...e,swapper:t.getAddress()})}async getSwapTransaction(t,e){let o=await this.getQuote(t,e),n=(await this.makeRequest("swap",{quote:o.quote})).swap;return{txHash:(await t.sendTransaction({to:n.to,value:n.value,data:n.data})).hash}}};h([m({name:"uniswap_check_approval",description:"Check if the wallet has enough approval for a token and return the transaction to approve the token. The approval must takes place before the swap transaction"}),s("design:type",Function),s("design:paramtypes",[typeof p>"u"?Object:p,typeof l>"u"?Object:l]),s("design:returntype",Promise)],u.prototype,"checkApproval",null);h([m({name:"uniswap_get_quote",description:"Get the quote for a swap"}),s("design:type",Function),s("design:paramtypes",[typeof p>"u"?Object:p,typeof c>"u"?Object:c]),s("design:returntype",Promise)],u.prototype,"getQuote",null);h([m({name:"uniswap_swap_tokens",description:"Swap tokens on Uniswap"}),s("design:type",Function),s("design:paramtypes",[typeof p>"u"?Object:p,typeof c>"u"?Object:c]),s("design:returntype",Promise)],u.prototype,"getSwapTransaction",null);export{u as a};
