import * as _goat_sdk_core from '@goat-sdk/core';
import { z } from 'zod';

declare enum SwapType {
    EXACT_INPUT = "EXACT_INPUT",
    EXACT_OUTPUT = "EXACT_OUTPUT"
}
declare enum Protocol {
    V2 = "V2",
    V3 = "V3"
}
declare enum Routing {
    CLASSIC = "CLASSIC",
    UNISWAPX = "UNISWAPX",
    UNISWAPX_V2 = "UNISWAPX_V2",
    V3_ONLY = "V3_ONLY",
    V2_ONLY = "V2_ONLY",
    BEST_PRICE = "BEST_PRICE",
    BEST_PRICE_V2 = "BEST_PRICE_V2",
    FASTEST = "FASTEST"
}
declare const QuoteSchema: z.ZodObject<{
    chainId: z.ZodNumber;
    swapper: z.ZodString;
    input: z.ZodAny;
    output: z.ZodAny;
    slippage: z.ZodAny;
    tradeType: z.ZodNativeEnum<typeof SwapType>;
    route: z.ZodAny;
    gasFee: z.ZodString;
    gasFeeUSD: z.ZodString;
    gasFeeQuote: z.ZodString;
    gasUseEstimate: z.ZodString;
    routeString: z.ZodString;
    blockNumber: z.ZodString;
    quoteId: z.ZodString;
    gasPrice: z.ZodString;
    maxFeePerGas: z.ZodString;
    maxPriorityFeePerGas: z.ZodString;
    txFailureReasons: z.ZodArray<z.ZodString, "many">;
    priceImpact: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    chainId: number;
    swapper: string;
    tradeType: SwapType;
    gasFee: string;
    gasFeeUSD: string;
    gasFeeQuote: string;
    gasUseEstimate: string;
    routeString: string;
    blockNumber: string;
    quoteId: string;
    gasPrice: string;
    maxFeePerGas: string;
    maxPriorityFeePerGas: string;
    txFailureReasons: string[];
    priceImpact: number;
    input?: any;
    output?: any;
    slippage?: any;
    route?: any;
}, {
    chainId: number;
    swapper: string;
    tradeType: SwapType;
    gasFee: string;
    gasFeeUSD: string;
    gasFeeQuote: string;
    gasUseEstimate: string;
    routeString: string;
    blockNumber: string;
    quoteId: string;
    gasPrice: string;
    maxFeePerGas: string;
    maxPriorityFeePerGas: string;
    txFailureReasons: string[];
    priceImpact: number;
    input?: any;
    output?: any;
    slippage?: any;
    route?: any;
}>;
declare const PermitDataSchema: z.ZodObject<{
    domain: z.ZodString;
    types: z.ZodRecord<z.ZodString, z.ZodAny>;
    primaryType: z.ZodString;
    message: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    message: Record<string, any>;
    domain: string;
    types: Record<string, any>;
    primaryType: string;
}, {
    message: Record<string, any>;
    domain: string;
    types: Record<string, any>;
    primaryType: string;
}>;
declare const QuoteResponseSchema: z.ZodObject<{
    routing: z.ZodNativeEnum<typeof Routing>;
    permitData: z.ZodOptional<z.ZodObject<{
        domain: z.ZodString;
        types: z.ZodRecord<z.ZodString, z.ZodAny>;
        primaryType: z.ZodString;
        message: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        message: Record<string, any>;
        domain: string;
        types: Record<string, any>;
        primaryType: string;
    }, {
        message: Record<string, any>;
        domain: string;
        types: Record<string, any>;
        primaryType: string;
    }>>;
    quote: z.ZodObject<{
        chainId: z.ZodNumber;
        swapper: z.ZodString;
        input: z.ZodAny;
        output: z.ZodAny;
        slippage: z.ZodAny;
        tradeType: z.ZodNativeEnum<typeof SwapType>;
        route: z.ZodAny;
        gasFee: z.ZodString;
        gasFeeUSD: z.ZodString;
        gasFeeQuote: z.ZodString;
        gasUseEstimate: z.ZodString;
        routeString: z.ZodString;
        blockNumber: z.ZodString;
        quoteId: z.ZodString;
        gasPrice: z.ZodString;
        maxFeePerGas: z.ZodString;
        maxPriorityFeePerGas: z.ZodString;
        txFailureReasons: z.ZodArray<z.ZodString, "many">;
        priceImpact: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        chainId: number;
        swapper: string;
        tradeType: SwapType;
        gasFee: string;
        gasFeeUSD: string;
        gasFeeQuote: string;
        gasUseEstimate: string;
        routeString: string;
        blockNumber: string;
        quoteId: string;
        gasPrice: string;
        maxFeePerGas: string;
        maxPriorityFeePerGas: string;
        txFailureReasons: string[];
        priceImpact: number;
        input?: any;
        output?: any;
        slippage?: any;
        route?: any;
    }, {
        chainId: number;
        swapper: string;
        tradeType: SwapType;
        gasFee: string;
        gasFeeUSD: string;
        gasFeeQuote: string;
        gasUseEstimate: string;
        routeString: string;
        blockNumber: string;
        quoteId: string;
        gasPrice: string;
        maxFeePerGas: string;
        maxPriorityFeePerGas: string;
        txFailureReasons: string[];
        priceImpact: number;
        input?: any;
        output?: any;
        slippage?: any;
        route?: any;
    }>;
}, "strip", z.ZodTypeAny, {
    routing: Routing;
    quote: {
        chainId: number;
        swapper: string;
        tradeType: SwapType;
        gasFee: string;
        gasFeeUSD: string;
        gasFeeQuote: string;
        gasUseEstimate: string;
        routeString: string;
        blockNumber: string;
        quoteId: string;
        gasPrice: string;
        maxFeePerGas: string;
        maxPriorityFeePerGas: string;
        txFailureReasons: string[];
        priceImpact: number;
        input?: any;
        output?: any;
        slippage?: any;
        route?: any;
    };
    permitData?: {
        message: Record<string, any>;
        domain: string;
        types: Record<string, any>;
        primaryType: string;
    } | undefined;
}, {
    routing: Routing;
    quote: {
        chainId: number;
        swapper: string;
        tradeType: SwapType;
        gasFee: string;
        gasFeeUSD: string;
        gasFeeQuote: string;
        gasUseEstimate: string;
        routeString: string;
        blockNumber: string;
        quoteId: string;
        gasPrice: string;
        maxFeePerGas: string;
        maxPriorityFeePerGas: string;
        txFailureReasons: string[];
        priceImpact: number;
        input?: any;
        output?: any;
        slippage?: any;
        route?: any;
    };
    permitData?: {
        message: Record<string, any>;
        domain: string;
        types: Record<string, any>;
        primaryType: string;
    } | undefined;
}>;
declare const TransactionSchema: z.ZodObject<{
    from: z.ZodString;
    to: z.ZodString;
    amount: z.ZodString;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    from: string;
    to: string;
    amount: string;
    token: string;
}, {
    from: string;
    to: string;
    amount: string;
    token: string;
}>;
declare const SwapResponseSchema: z.ZodObject<{
    transaction: z.ZodObject<{
        from: z.ZodString;
        to: z.ZodString;
        amount: z.ZodString;
        token: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        from: string;
        to: string;
        amount: string;
        token: string;
    }, {
        from: string;
        to: string;
        amount: string;
        token: string;
    }>;
    gasFee: z.ZodString;
}, "strip", z.ZodTypeAny, {
    gasFee: string;
    transaction: {
        from: string;
        to: string;
        amount: string;
        token: string;
    };
}, {
    gasFee: string;
    transaction: {
        from: string;
        to: string;
        amount: string;
        token: string;
    };
}>;
declare const CheckApprovalBodySchema_base: _goat_sdk_core.ToolParametersStatic<z.ZodObject<{
    token: z.ZodString;
    amount: z.ZodString;
    walletAddress: z.ZodString;
}, "strip", z.ZodTypeAny, {
    amount: string;
    token: string;
    walletAddress: string;
}, {
    amount: string;
    token: string;
    walletAddress: string;
}>>;
declare class CheckApprovalBodySchema extends CheckApprovalBodySchema_base {
}
declare const GetQuoteParameters_base: _goat_sdk_core.ToolParametersStatic<z.ZodObject<{
    tokenIn: z.ZodString;
    tokenOut: z.ZodString;
    tokenInChainId: z.ZodNumber;
    tokenOutChainId: z.ZodNumber;
    amount: z.ZodString;
    type: z.ZodDefault<z.ZodNativeEnum<typeof SwapType>>;
    protocols: z.ZodArray<z.ZodNativeEnum<typeof Protocol>, "many">;
    routingPreference: z.ZodDefault<z.ZodNativeEnum<typeof Routing>>;
}, "strip", z.ZodTypeAny, {
    type: SwapType;
    amount: string;
    tokenIn: string;
    tokenOut: string;
    tokenInChainId: number;
    tokenOutChainId: number;
    protocols: Protocol[];
    routingPreference: Routing;
}, {
    amount: string;
    tokenIn: string;
    tokenOut: string;
    tokenInChainId: number;
    tokenOutChainId: number;
    protocols: Protocol[];
    type?: SwapType | undefined;
    routingPreference?: Routing | undefined;
}>>;
declare class GetQuoteParameters extends GetQuoteParameters_base {
}

export { CheckApprovalBodySchema, GetQuoteParameters, PermitDataSchema, QuoteResponseSchema, QuoteSchema, SwapResponseSchema, TransactionSchema };
